class Drawer{

    field int leftScreenMemOffset, topScreenMemOffset;
    field Array spritesArray;

    constructor Drawer new(int rows, int cols){
        let leftScreenMemOffset = (32 - cols) / 2;
        let topScreenMemOffset = (16 - rows) / 2;
        do initializeSpritesArray();
        return this;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
    
    method void drawSprite(int x, int y, int spriteNumber){
        var int memAddress, location, i;
        var Array row;
        let location = ((topScreenMemOffset + y) * 16 * 32) + leftScreenMemOffset + x;
        let memAddress = 16384+location;
        let row = spritesArray[spriteNumber];
        let i = 0;
        
        while (i < 16){
            do Memory.poke(memAddress, row[i]);
            let memAddress = memAddress + 32;
            let i = i + 1;
        }
        
        return;
    }

    method void experiment(){
        var int i, memAddress;
        do Output.printInt(topScreenMemOffset);
        do Output.printInt(leftScreenMemOffset);
        let memAddress = 16384 + (topScreenMemOffset * 32 * 16) + leftScreenMemOffset;
        while (i < 16){
            do Memory.poke(memAddress, -1);
            let memAddress = memAddress + 32;
            let i = i + 1;
        }
        return;
    }

    method void drawGrid(int rows, int cols, Array grid){
        var int i, j, location, cellNumber;
        var Array row;
        let i = 0;
        while (i < rows){
            let row = grid[i];
            let j = 0;
            while (j < cols){
                do drawSprite(j, i, row[j]);
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    method void drawLeftRestrictions(int rows, Array leftRestrictions){
        var int i;
        let i = 0;
        while (i < rows){
            if (~(leftRestrictions[i] = -1)) { do drawSprite(-1, i, leftRestrictions[i]); }
            let i = i + 1;
        }
        return;
    }

    method void drawTopRestrictions(int cols, Array topRestrictions){
        var int j;
        let j = 0;
        while (j < cols){
            if (~(topRestrictions[j] = -1)) { do drawSprite(j, -1, topRestrictions[j]); }
            let j = j + 1;
        }
        return;
    }

    method void drawUserPointer(int x, int y){
        var int memAddress, location;
        let location = ((topScreenMemOffset + y) * 16 * 32) + leftScreenMemOffset + x;
        let memAddress = 16384+location;
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress + 480, 0);
        do Screen.setColor(false);
        let x = (leftScreenMemOffset + x) * 16;
        let y = (topScreenMemOffset + y) * 16;
        do Screen.drawLine(x, y, x, y + 15);
        do Screen.drawLine(x + 15, y, x + 15, y + 15);
        return;
    }

    method void eraseUserPointer(int x, int y, int spriteNumber){
        do drawSprite(x, y, spriteNumber);
        return;
    }

    method void drawHelp(){
        do Output.moveCursor(0, 0);
        do Output.printString("Press H again to hide.");
        do Output.moveCursor(2, 0);
        do Output.printString("Empty: ");
        do drawSprite(4 - leftScreenMemOffset, 1 - topScreenMemOffset, 10);
        do Output.moveCursor(5, 0);
        do Output.printString("Grass: ");
        do drawSprite(4 - leftScreenMemOffset, 3 - topScreenMemOffset, 11);
        do Output.moveCursor(8, 0);
        do Output.printString("Tent: ");
        do drawSprite(4 - leftScreenMemOffset, 5 - topScreenMemOffset, 12);
        do Output.moveCursor(11, 0);
        do Output.printString("Tree: ");
        do drawSprite(4 - leftScreenMemOffset, 7 - topScreenMemOffset, 13);
        do Output.moveCursor(14, 0);
        do Output.printString("Space: change cell");
        do Output.moveCursor(17, 0);
        do Output.printString("All rules in readme");
        return;
    }

    method void eraseHelp(){
        do Output.moveCursor(0, 0);
        do Screen.setColor(false);
        do Screen.drawRectangle(0, 0, 16 * 10, 15 * 16);
        do Screen.drawRectangle(0, 0, 16 * 16, 16);
        return;
    }

    method void initializeSpritesArray(){
        
        var int i;
        var Array numbers, row;
        let spritesArray = Array.new(14);
        let i = 0;
        
        while (i < 14){
            let numbers = Array.new(16);
            let spritesArray[i] = numbers;
            let i = i + 1;
        }
        
        // zero
        let row = spritesArray[0];
        let row[0] = 1020;
        let row[1] = 2046;
        let row[2] = 4095;
        let row[3] = 3591;
        let row[4] = 3591;
        let row[5] = 3591;
        let row[6] = 3591;
        let row[7] = 3591;
        let row[8] = 3591;
        let row[9] = 3591;
        let row[10] = 3591;
        let row[11] = 3591;
        let row[12] = 4095;
        let row[13] = 2046;
        let row[14] = 1020;
        let row[15] = 0;

        // one
        let row = spritesArray[1];
        let row[0] = 480;
        let row[1] = 496;
        let row[2] = 440;
        let row[3] = 412;
        let row[4] = 398;
        let row[5] = 391;
        let row[6] = 384;
        let row[7] = 384;
        let row[8] = 384;
        let row[9] = 384;
        let row[10] = 384;
        let row[11] = 384;
        let row[12] = 384;
        let row[13] = 384;
        let row[14] = 384;
        let row[15] = 0;

        // two
        let row = spritesArray[2];
        let row[0] = 1020;
        let row[1] = 2046;
        let row[2] = 3591;
        let row[3] = 3591;
        let row[4] = 3591;
        let row[5] = 3840;
        let row[6] = 3968;
        let row[7] = 1984;
        let row[8] = 992;
        let row[9] = 496;
        let row[10] = 248;
        let row[11] = 124;
        let row[12] = 62;
        let row[13] = 4095;
        let row[14] = 4095;
        let row[15] = 0;

        // three
        let row = spritesArray[3];
        let row[0] = 1020;
        let row[1] = 2046;
        let row[2] = 4095;
        let row[3] = 3591;
        let row[4] = 3591;
        let row[5] = 3840;
        let row[6] = 1984;
        let row[7] = 992;
        let row[8] = 1984;
        let row[9] = 3840;
        let row[10] = 3591;
        let row[11] = 3591;
        let row[12] = 4095;
        let row[13] = 2046;
        let row[14] = 1020;
        let row[15] = 0;

        // four
        let row = spritesArray[4];
        let row[0] = 1920;
        let row[1] = 1984;
        let row[2] = 1760;
        let row[3] = 1648;
        let row[4] = 1592;
        let row[5] = 1564;
        let row[6] = 1550;
        let row[7] = 1543;
        let row[8] = 8191;
        let row[9] = 8191;
        let row[10] = 1536;
        let row[11] = 1536;
        let row[12] = 1536;
        let row[13] = 1536;
        let row[14] = 1536;
        let row[15] = 0;

        // five
        let row = spritesArray[5];
        let row[0] = 4095;
        let row[1] = 4095;
        let row[2] = 7;
        let row[3] = 7;
        let row[4] = 7;
        let row[5] = 1023;
        let row[6] = 2046;
        let row[7] = 4092;
        let row[8] = 3584;
        let row[9] = 3584;
        let row[10] = 3587;
        let row[11] = 3591;
        let row[12] = 4095;
        let row[13] = 2046;
        let row[14] = 1020;
        let row[15] = 0;

        // six
        let row = spritesArray[6];
        let row[0] = 1020;
        let row[1] = 2046;
        let row[2] = 3599;
        let row[3] = 7;
        let row[4] = 7;
        let row[5] = 1023;
        let row[6] = 2047;
        let row[7] = 4095;
        let row[8] = 3591;
        let row[9] = 3591;
        let row[10] = 3591;
        let row[11] = 3591;
        let row[12] = 4095;
        let row[13] = 2046;
        let row[14] = 1020;
        let row[15] = 0;

        // seven
        let row = spritesArray[7];
        let row[0] = 4095;
        let row[1] = 4095;
        let row[2] = 3584;
        let row[3] = 1792;
        let row[4] = 896;
        let row[5] = 448;
        let row[6] = 224;
        let row[7] = 96;
        let row[8] = 96;
        let row[9] = 96;
        let row[10] = 96;
        let row[11] = 96;
        let row[12] = 96;
        let row[13] = 96;
        let row[14] = 96;
        let row[15] = 0;

        // eight
        let row = spritesArray[8];
        let row[0] = 1020;
        let row[1] = 2046;
        let row[2] = 3591;
        let row[3] = 3591;
        let row[4] = 3591;
        let row[5] = 3591;
        let row[6] = 2046;
        let row[7] = 2046;
        let row[8] = 2046;
        let row[9] = 3591;
        let row[10] = 3591;
        let row[11] = 3591;
        let row[12] = 3591;
        let row[13] = 2046;
        let row[14] = 1020;
        let row[15] = 0;

        // nine
        let row = spritesArray[9];
        let row[0] = 1020;
        let row[1] = 2046;
        let row[2] = 3591;
        let row[3] = 3591;
        let row[4] = 3591;
        let row[5] = 3591;
        let row[6] = 4095;
        let row[7] = 4094;
        let row[8] = 4092;
        let row[9] = 3584;
        let row[10] = 3584;
        let row[11] = 3587;
        let row[12] = 3591;
        let row[13] = 2046;
        let row[14] = 1020;
        let row[15] = 0;

        // empty
        let row = spritesArray[10];
        let row[0] = -1;
        let row[1] = -1;
        let row[2] = -1;
        let row[3] = -1;
        let row[4] = -1;
        let row[5] = -1;
        let row[6] = -1;
        let row[7] = -1;
        let row[8] = -1;
        let row[9] = -1;
        let row[10] = -1;
        let row[11] = -1;
        let row[12] = -1;
        let row[13] = -1;
        let row[14] = -1;
        let row[15] = -1;

        // grass
        let row = spritesArray[11];
        let row[0] = -1;
        let row[1] = -32767;
        let row[2] = -32767;
        let row[3] = -32767;
        let row[4] = -32767;
        let row[5] = -32767;
        let row[6] = -32767;
        let row[7] = -32767;
        let row[8] = -32767;
        let row[9] = -32767;
        let row[10] = -32767;
        let row[11] = -32767;
        let row[12] = -32767;
        let row[13] = -32767;
        let row[14] = -32767;
        let row[15] = -1;

        // tent
        let row = spritesArray[12];
        let row[0] = -1;
        let row[1] = -32767;
        let row[2] = -32383;
        let row[3] = -32383;
        let row[4] = -31807;
        let row[5] = -31807;
        let row[6] = -30751;
        let row[7] = -31135;
        let row[8] = -29071;
        let row[9] = -29647;
        let row[10] = -25543;
        let row[11] = -26599;
        let row[12] = -16387;
        let row[13] = -16387;
        let row[14] = -32767;
        let row[15] = -1;

        // tree
        let row = spritesArray[13];
        let row[0] = -1;
        let row[1] = -32767;
        let row[2] = -31807;
        let row[3] = -30751;
        let row[4] = -28687;
        let row[5] = -28687;
        let row[6] = -28687;
        let row[7] = -28687;
        let row[8] = -30751;
        let row[9] = -32383;
        let row[10] = -32383;
        let row[11] = -32383;
        let row[12] = -31807;
        let row[13] = -31807;
        let row[14] = -32767;
        let row[15] = -1;
        
        return;
    }

    method void drawVictoryScreen(){
        var int memAddress, location;
        let location = (96 * 32) + 12;
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress +192, -128);
        do Memory.poke(memAddress +224, -64);
        do Memory.poke(memAddress +256, -15904);
        do Memory.poke(memAddress +288, -32528);
        do Memory.poke(memAddress +320, 112);
        do Memory.poke(memAddress +352, 48);
        do Memory.poke(memAddress +384, 48);
        do Memory.poke(memAddress +416, 48);
        do Memory.poke(memAddress +448, 48);
        do Memory.poke(memAddress +480, 48);
        do Memory.poke(memAddress +512, 48);
        do Memory.poke(memAddress +544, 48);
        do Memory.poke(memAddress +576, 48);
        do Memory.poke(memAddress +608, 112);
        do Memory.poke(memAddress +640, 112);
        do Memory.poke(memAddress +672, 96);
        do Memory.poke(memAddress +704, -32544);
        do Memory.poke(memAddress +736, -32544);
        do Memory.poke(memAddress +768, -32576);
        do Memory.poke(memAddress +800, -32576);
        do Memory.poke(memAddress +832, -32528);
        do Memory.poke(memAddress +864, -32712);
        do Memory.poke(memAddress +896, 28);
        do Memory.poke(memAddress +928, 14);
        do Memory.poke(memAddress +960, 511);
        do Memory.poke(memAddress +992, 1023);
        do Memory.poke(memAddress +1024, 1923);
        do Memory.poke(memAddress +1056, 1795);
        do Memory.poke(memAddress +1088, 1539);
        do Memory.poke(memAddress +1120, 1539);
        do Memory.poke(memAddress +1152, 1539);
        do Memory.poke(memAddress +1184, 3843);
        do Memory.poke(memAddress +1216, 4095);
        do Memory.poke(memAddress +1248, 3327);
        do Memory.poke(memAddress +1280, 3075);
        do Memory.poke(memAddress +1312, 3075);
        do Memory.poke(memAddress +1344, 7171);
        do Memory.poke(memAddress +1376, 8065);
        do Memory.poke(memAddress +1408, 8191);
        do Memory.poke(memAddress +1440, 6395);
        do Memory.poke(memAddress +1472, 7171);
        do Memory.poke(memAddress +1504, 7683);
        do Memory.poke(memAddress +1536, 4094);
        do Memory.poke(memAddress +1568, 2046);
        do Memory.poke(memAddress +1600, 28);
        do Memory.poke(memAddress +1632, 60);
        do Memory.poke(memAddress +1664, 504);
        do Memory.poke(memAddress +1696, -64);
        do Memory.poke(memAddress +1728, -512);
        // column 1
        do Memory.poke(memAddress +225, 1);
        do Memory.poke(memAddress +257, 3);
        do Memory.poke(memAddress +289, 7);
        do Memory.poke(memAddress +321, 7);
        do Memory.poke(memAddress +353, 6);
        do Memory.poke(memAddress +385, 6);
        do Memory.poke(memAddress +417, 6);
        do Memory.poke(memAddress +449, 6);
        do Memory.poke(memAddress +481, 6);
        do Memory.poke(memAddress +513, 6);
        do Memory.poke(memAddress +545, 6);
        do Memory.poke(memAddress +577, 6);
        do Memory.poke(memAddress +609, 7);
        do Memory.poke(memAddress +641, 7);
        do Memory.poke(memAddress +673, 3);
        do Memory.poke(memAddress +705, 3);
        do Memory.poke(memAddress +737, 3);
        do Memory.poke(memAddress +769, 1);
        do Memory.poke(memAddress +801, 1);
        do Memory.poke(memAddress +833, 3);
        do Memory.poke(memAddress +865, 7);
        do Memory.poke(memAddress +897, 15);
        do Memory.poke(memAddress +929, 30);
        do Memory.poke(memAddress +961, -4036);
        do Memory.poke(memAddress +993, -3976);
        do Memory.poke(memAddress +1025, 16368);
        do Memory.poke(memAddress +1057, 4064);
        do Memory.poke(memAddress +1185, -8192);
        do Memory.poke(memAddress +1217, -2048);
        do Memory.poke(memAddress +1249, 32256);
        do Memory.poke(memAddress +1281, 8064);
        do Memory.poke(memAddress +1313, 1920);
        do Memory.poke(memAddress +1345, 384);
        do Memory.poke(memAddress +1377, 384);
        do Memory.poke(memAddress +1409, 384);
        do Memory.poke(memAddress +1441, 384);
        do Memory.poke(memAddress +1473, 448);
        do Memory.poke(memAddress +1505, 448);
        do Memory.poke(memAddress +1537, 192);
        do Memory.poke(memAddress +1569, 224);
        do Memory.poke(memAddress +1601, 96);
        do Memory.poke(memAddress +1633, 120);
        do Memory.poke(memAddress +1665, 63);
        do Memory.poke(memAddress +1697, 7);
        // column 2
        do Memory.poke(memAddress +98, ~32767);
        do Memory.poke(memAddress +130, -16384);
        do Memory.poke(memAddress +162, -8192);
        do Memory.poke(memAddress +194, -8192);
        do Memory.poke(memAddress +226, 28672);
        do Memory.poke(memAddress +258, 12288);
        do Memory.poke(memAddress +290, 12288);
        do Memory.poke(memAddress +322, 12288);
        do Memory.poke(memAddress +354, 12288);
        do Memory.poke(memAddress +386, 12288);
        do Memory.poke(memAddress +418, 28672);
        do Memory.poke(memAddress +450, 24576);
        do Memory.poke(memAddress +482, 24576);
        do Memory.poke(memAddress +514, -8192);
        do Memory.poke(memAddress +546, -16384);
        do Memory.poke(memAddress +578, ~32767);
        do Memory.poke(memAddress +802, -1024);
        do Memory.poke(memAddress +834, -512);
        do Memory.poke(memAddress +866, 8160);
        do Memory.poke(memAddress +898, 2044);
        do Memory.poke(memAddress +930, 127);
        do Memory.poke(memAddress +962, -16369);
        do Memory.poke(memAddress +994, -4095);
        do Memory.poke(memAddress +1026, 31744);
        do Memory.poke(memAddress +1058, 7936);
        do Memory.poke(memAddress +1090, 1984);
        do Memory.poke(memAddress +1122, 504);
        do Memory.poke(memAddress +1154, 127);
        do Memory.poke(memAddress +1186, 15);
        do Memory.poke(memAddress +1218, 3);
        // column 3
        do Memory.poke(memAddress +3, -8);
        do Memory.poke(memAddress +35, -2);
        do Memory.poke(memAddress +67, 15);
        do Memory.poke(memAddress +99, 7);
        do Memory.poke(memAddress +131, 1);
        do Memory.poke(memAddress +163, 448);
        do Memory.poke(memAddress +195, 448);
        do Memory.poke(memAddress +227, 448);
        do Memory.poke(memAddress +259, 448);
        do Memory.poke(memAddress +291, 448);
        do Memory.poke(memAddress +483, -64);
        do Memory.poke(memAddress +515, -64);
        do Memory.poke(memAddress +547, 1);
        do Memory.poke(memAddress +579, 3);
        do Memory.poke(memAddress +611, 3);
        do Memory.poke(memAddress +643, 126);
        do Memory.poke(memAddress +675, 1020);
        do Memory.poke(memAddress +707, 16256);
        do Memory.poke(memAddress +739, -64);
        do Memory.poke(memAddress +771, -3586);
        do Memory.poke(memAddress +803, 127);
        do Memory.poke(memAddress +835, -1017);
        do Memory.poke(memAddress +867, -512);
        do Memory.poke(memAddress +899, 4064);
        do Memory.poke(memAddress +931, 1022);
        do Memory.poke(memAddress +963, 63);
        do Memory.poke(memAddress +995, 7);
        // column 4
        do Memory.poke(memAddress +4, 4095);
        do Memory.poke(memAddress +36, 16383);
        do Memory.poke(memAddress +68, 30720);
        do Memory.poke(memAddress +100, -4096);
        do Memory.poke(memAddress +132, -8192);
        do Memory.poke(memAddress +164, -16370);
        do Memory.poke(memAddress +196, -16370);
        do Memory.poke(memAddress +228, -32754);
        do Memory.poke(memAddress +260, -32754);
        do Memory.poke(memAddress +292, 14);
        do Memory.poke(memAddress +484, 31);
        do Memory.poke(memAddress +516, 31);
        do Memory.poke(memAddress +644, -16384);
        do Memory.poke(memAddress +676, -8192);
        do Memory.poke(memAddress +708, 24576);
        do Memory.poke(memAddress +740, 24577);
        do Memory.poke(memAddress +772, -8189);
        do Memory.poke(memAddress +804, -8129);
        do Memory.poke(memAddress +836, -16257);
        do Memory.poke(memAddress +868, -32513);
        do Memory.poke(memAddress +900, -32320);
        do Memory.poke(memAddress +932, 896);
        do Memory.poke(memAddress +964, 768);
        do Memory.poke(memAddress +996, 1792);
        do Memory.poke(memAddress +1028, 1792);
        do Memory.poke(memAddress +1060, 1536);
        do Memory.poke(memAddress +1092, 3584);
        do Memory.poke(memAddress +1124, 3584);
        do Memory.poke(memAddress +1156, 3072);
        do Memory.poke(memAddress +1188, 3072);
        do Memory.poke(memAddress +1220, 3072);
        do Memory.poke(memAddress +1252, 3072);
        do Memory.poke(memAddress +1284, 3072);
        do Memory.poke(memAddress +1316, 3072);
        do Memory.poke(memAddress +1348, 3072);
        do Memory.poke(memAddress +1380, 3072);
        do Memory.poke(memAddress +1412, 3072);
        do Memory.poke(memAddress +1444, 3072);
        do Memory.poke(memAddress +1476, 3072);
        do Memory.poke(memAddress +1508, 3072);
        // column 5
        do Memory.poke(memAddress +165, 1);
        do Memory.poke(memAddress +197, 1);
        do Memory.poke(memAddress +229, 3);
        do Memory.poke(memAddress +261, 3);
        do Memory.poke(memAddress +293, 3);
        do Memory.poke(memAddress +325, 6);
        do Memory.poke(memAddress +357, 6);
        do Memory.poke(memAddress +389, 6);
        do Memory.poke(memAddress +421, 6);
        do Memory.poke(memAddress +453, 6);
        do Memory.poke(memAddress +485, 6);
        do Memory.poke(memAddress +517, 6);
        do Memory.poke(memAddress +549, 6);
        do Memory.poke(memAddress +581, 7);
        do Memory.poke(memAddress +613, 7);
        do Memory.poke(memAddress +645, 3);
        do Memory.poke(memAddress +677, 1);
        do Memory.poke(memAddress +805, 1);
        do Memory.poke(memAddress +837, 1);
        do Memory.poke(memAddress +869, 3);
        do Memory.poke(memAddress +901, 7);
        do Memory.poke(memAddress +933, 15);
        do Memory.poke(memAddress +965, 14);
        do Memory.poke(memAddress +997, 12);
        do Memory.poke(memAddress +1029, 28);
        do Memory.poke(memAddress +1061, 24);
        do Memory.poke(memAddress +1093, 56);
        do Memory.poke(memAddress +1125, 56);
        do Memory.poke(memAddress +1157, 112);
        do Memory.poke(memAddress +1189, 112);
        do Memory.poke(memAddress +1221, 224);
        do Memory.poke(memAddress +1253, 224);
        do Memory.poke(memAddress +1285, 192);
        do Memory.poke(memAddress +1317, 448);
        do Memory.poke(memAddress +1349, 448);
        do Memory.poke(memAddress +1381, 896);
        do Memory.poke(memAddress +1413, 896);
        do Memory.poke(memAddress +1445, 768);
        do Memory.poke(memAddress +1477, 768);
        do Memory.poke(memAddress +1509, 768);
        return;
    }
}