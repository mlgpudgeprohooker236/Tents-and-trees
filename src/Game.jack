class Game{

    field int rows, cols, userPointerX, userPointerY, treesCount, userTentsCount, levelNumber;
    field Array grid, trees, answerTents, leftRestrictions, topRestrictions;
    field Drawer drawer;

    constructor Game new(){
        let userPointerX = 0;
        let userPointerY = 0;
        return this;
    }

    method void dispose(){
        do drawer.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void run(){
        var Array row;
        var char key;
        var boolean exit, isCompleted, isHelpEnabled;
        var int x, y, spriteNumber;
        let exit = false;
        let isCompleted = false;
        let isHelpEnabled = false;
        
        do createLevel();

        while (~exit){
            let x = 0;
            let y = 0;
            let row = grid[userPointerY];
            while (key = 0){ let key = Keyboard.keyPressed(); }
            if (key = 81) { let exit = true; } // q (quit)
            if (key = 87) { let y = -1; } // w (top)
            if (key = 65) { let x = -1; } // a (left)
            if (key = 83) { let y = 1; } // s (down)
            if (key = 68) { let x = 1; } // d (right)
            if (key = 72){
                let isHelpEnabled = ~(isHelpEnabled);
                if (isHelpEnabled) { do drawer.drawHelp(); }
                else { do drawer.eraseHelp(); }
            }

            if (key = 32 & (~(row[userPointerX] = 13))){ // space (change cell)
                let row[userPointerX] = row[userPointerX] + 1;
                if (row[userPointerX] = 12) { let userTentsCount = userTentsCount + 1; }
                if (row[userPointerX] > 12) { let row[userPointerX] = 10; let userTentsCount = userTentsCount - 1; }
                do drawer.drawSprite(userPointerX, userPointerY, row[userPointerX]);
                let isCompleted = checkCompleted();
                if (isCompleted){
                    let isHelpEnabled = false;
                    do drawer.eraseHelp();
                    let exit = runVictoryMenu();
                    if (~exit){
                        let isCompleted = false;
                        do createLevel();
                    }
                }
            }
            let row = grid[userPointerY];
            let spriteNumber = row[userPointerX];
            do drawer.eraseUserPointer(userPointerX, userPointerY, spriteNumber);
            do movePointer(x, y);
            do drawer.drawUserPointer(userPointerX, userPointerY);
            if (exit) { do Screen.clearScreen(); }
            while (~(key = 0)){ let key = Keyboard.keyPressed(); }
        }

        return;
    }

    method boolean checkCompleted(){
        var boolean isCompleted;
        var int i;
        var Pair tent;
        var Array row;
        let i = 0;
        let isCompleted = true;
        if (~(userTentsCount = treesCount)){ let isCompleted = false; }
        while (i < treesCount){
            let tent = answerTents[i];
            let row = grid[tent.gety()];
            if (~(row[tent.getx()] = 12)){ let isCompleted = false; }
            let i = i + 1;
        }
        return isCompleted;
    }

    method boolean runVictoryMenu(){
        var char key;
        var boolean exit;
        let exit = false;
        do Output.moveCursor(0, 0);
        do Output.printString("Victory");
        do Sys.wait(1500);
        do Screen.clearScreen();
        do drawer.drawVictoryScreen();
        do Output.moveCursor(0, 0);
        do Output.printString("Press `q` to exit. Press any other key to continue.");
        while (key = 0){ let key = Keyboard.keyPressed(); }
        if (key = 81) { let exit = true; }
        while (~(key = 0)){ let key = Keyboard.keyPressed(); }
        do Screen.drawRectangle(0, 0, 16 * 31, 32);
        return exit; 
    }

    method void createLevel(){
        let userPointerX = 0;
        let userPointerY = 0;
        let userTentsCount = 0;
        do selectLevelNumber();
        do generateMap(levelNumber);
        let drawer = Drawer.new(rows, cols);
        do Screen.clearScreen();
        do drawer.drawTopRestrictions(cols, topRestrictions);
        do drawer.drawLeftRestrictions(rows, leftRestrictions);
        do drawer.drawGrid(rows, cols, grid);
        do drawer.drawUserPointer(userPointerX, userPointerY);
        return;
    }

    method void generateMap(int levelNumber){
        var int i, j;
        var Array row, restrictions;
        var Pair tree, sizes;
        
        let sizes = MapGenerator.generateGridSizes(levelNumber);
        let rows = sizes.getx();
        let cols = sizes.gety();
        let treesCount = MapGenerator.generateTreesCount(levelNumber);
        let trees = MapGenerator.generateTrees(levelNumber, treesCount);
        let answerTents = MapGenerator.generateAnswerTents(levelNumber, treesCount);
        let restrictions = MapGenerator.generateRestrictions(levelNumber, rows, cols);
        let leftRestrictions = restrictions[0];
        let topRestrictions = restrictions[1];
        let grid = MapGenerator.generateGrid(rows, cols, treesCount, trees);
        return;
    }

    method void selectLevelNumber(){
        var char key;
        var boolean exit;
        let exit = false;
        do Output.moveCursor(0, 0);
        do Output.printString("Pick a level number: any digit in range [1, 4].");
        while (~exit){
            while (~((key > 48) & (key < 53))){ let key = Keyboard.keyPressed(); }
            if (key = 49){ let levelNumber = 1; }
            if (key = 50){ let levelNumber = 2; }
            if (key = 51){ let levelNumber = 3; }
            if (key = 52){ let levelNumber = 4; }
            while (~(key = 0)){ let key = Keyboard.keyPressed(); }
            let exit = true;
        }
        return;
    }

    method void movePointer(int dx, int dy){
        var Array row;
        var int x, y, cell;
        let x = userPointerX + dx;
        let y = userPointerY + dy;
        if ((x > (-1)) & (x < cols)) { let userPointerX = x; }
        if ((y > (-1)) & (y < rows)) { let userPointerY = y; }
        return;
    }
}